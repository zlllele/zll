package net.htjs.pt4.cms.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import net.htjs.pt4.cms.entity.Site;
import net.htjs.pt4.cms.service.ISiteService;
import net.htjs.pt4.cms.utils.FileUtils;
import net.htjs.pt4.cms.utils.UserUtils;
import net.htjs.pt4.core.BaseController;

@RestController
@RequestMapping("/resource")
public class ResourceController extends BaseController{
	
	@Resource
	private ISiteService siteService;
	/**
	 * 读取目录下文件树
	 * @param siteMap
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@GetMapping(value="/tree", produces = "application/json;charset=UTF-8")
	public void tree(@RequestParam Map<String, Object> siteMap,HttpServletRequest request,HttpServletResponse response) throws Exception {
		String zzjgDm = UserUtils.getZzjgId(request);
		if (StringUtils.isNotBlank(zzjgDm)) {
			Site site = siteService.findByZzjgDm(zzjgDm);
			String root = (String) siteMap.get("root");
//			String path = site.getStaticPath()+"/"+site.getTplSolution()+"_res/"+site.getStaticDir()+"/";
			String path = site.getTplPath()+"/"+site.getTplSolution()+"_res/";
			if ("source".equals(root)) {
				root = path;
			}
	        response.setContentType("text/json;charset=UTF-8");
	        response.setCharacterEncoding("UTF-8");
	        PrintWriter out = response.getWriter();
	        String json = FileUtils.listfile(root);
			out.print(json);
	        out.flush();
	        out.close();
		}
	}
	
	/**
	 * 附件上传
	 */
	@RequestMapping(value = "/uploadfile")
	public void uploadfile(String callback,
			@RequestParam Map<String, String> contentTypeMap,
			@RequestParam(value = "upload") MultipartFile file,
			HttpServletRequest request) {
		String filename = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("\\") + 1);;
		String filepath = contentTypeMap.get("path");
		byte[] bytes;
		try {
			String zzjgDm = UserUtils.getZzjgId(request);
			if (StringUtils.isNotBlank(zzjgDm)) {
				Site site = siteService.findByZzjgDm(zzjgDm);
				String path = site.getTplPath()+"/"+site.getTplSolution()+"_res";
				if (filepath.indexOf("source")>=0) {
					filepath = filepath.replace("source", path);
				}
				bytes = file.getBytes();
				BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(filepath+"/"+filename)));
				stream.write(bytes);
				stream.close();
				String path1 = site.getTplPath()+"/"+site.getTplSolution()+"_res";
				String path2 = site.getStaticPath()+"/"+site.getStaticDir();
				filepath = filepath.replace("//", "/");
				String pathTemp = filepath.replace(path1, path2);
				BufferedOutputStream stream2 = new BufferedOutputStream(new FileOutputStream(new File(pathTemp+"/"+filename)));
				stream2.write(bytes);
				stream2.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
