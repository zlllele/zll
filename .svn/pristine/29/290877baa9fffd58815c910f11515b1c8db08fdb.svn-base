// 对browser支持
$.browser = {};
$.browser.mozilla = /firefox/.test(navigator.userAgent.toLowerCase());
$.browser.webkit = /webkit/.test(navigator.userAgent.toLowerCase());
$.browser.opera = /opera/.test(navigator.userAgent.toLowerCase());
$.browser.msie = /msie/.test(navigator.userAgent.toLowerCase());

String.prototype.trim = function() {
	return this.replace(/(^\s*)|(\s*$)/g, "");
};
String.prototype.ltrim = function() {
	return this.replace(/(^\s*)/g, "");
};
String.prototype.rtrim = function() {
	return this.replace(/(\s*$)/g, "");
};
String.prototype.endsWith = function(suffix) {
	return this.indexOf(suffix, this.length - suffix.length) !== -1;
};

String.prototype.isMobile = function() {
	return (/^(?:13\d|15[89])-?\d{5}(\d{3}|\*{3})$/.test(this.trim()));
};
String.prototype.isTel = function() {
	return (/^(([0\+]\d{2,3}-)?(0\d{2,3})-)(\d{7,8})(-(\d{3,}))?$/.test(this.trim()));
};
String.prototype.isMobileTel = function() {
	return (this.isTel() || this.isMobile());
};
String.prototype.isEmail = function() {
	return (/^(\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)$/.test(this.trim()));
};
String.prototype.isNumber = function() {
	return (!isNaN(this.trim()));
};
String.prototype.isInt = function() {
	return (/^(-?[0-9]\d*)$/.test(this.trim()));
};
String.prototype.isFloat = function() {
	return (/^(-?([0-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0))$/.test(this.Trim()));
};
String.prototype.isPwd = function() {
	return (/^[\w+]{6,20}$/.test(this.Trim()));
};
String.prototype.isChineseFirstName = function() {
	return (/^[\u4e00-\u9fa5]{1,2}$/.test(this.trim()));
};
String.prototype.isChineseLastName = function() {
	return (/^[\u4e00-\u9fa5]{1,15}$/.test(this.trim()));
};
String.prototype.isEmpty = function() {
	return (this.trim() == "" || this == null);
};
String.prototype.isDate = function() {
	return /^((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-))$/
			.test(this.trim());
};
String.prototype.isMoney = function() {
	return (/^(-?\d+)(\.\d+)?$/.test(this.trim()));
};

/**
 * Date:2010-3-17<br>
 * 支持多浏览器的无线产品线辅助工具类
 * 
 * @author <a href="mailto:yanghongjian@htjs.net">YangHongJian</a>
 * @version 1.0
 * 
 * <pre>
 * <OL>
 * 功能支持：
 * <LI>
 * 添加通过ID获取对象的方法byId
 * <LI>
 * 解析JSON的数据格式，并把数据绑定到显示控件    bindFormData
 * <LI>
 * 从URL中获取属性值getUrlQueryString
 * <LI>
 * 封装减化版本的通讯控制组件 xhrAjax    请先引用jquery.js
 * <LI>
 * 根据DOM的ID获取对象(快速方法)byId
 * </OL>
 * </pre>
 */
var baseTools = (function() {
	// 私有属性
	var curSeg;
	var _curPage = window.document.location.href;
	var _curPagePath = window.document.location.pathname;
	var pos = _curPage.indexOf(_curPagePath);
	var prePath = _curPage.substring(0, pos);
	var postPath = _curPagePath.substring(0, _curPagePath.substr(1).indexOf('/') + 1);
	var _rootPath = prePath + postPath;
	var pPage = "";
	try {
		pPage = parent.window.document.location.href;
	} catch (e) {
	}
	var _commonsJsPath = "";
	// 私有方法
	// 公有方法
	return {
		getDocumentDomain : function() {
			return document.domain;
		},
        getZZJG_RootName:function(){
			return "";
		},
		onInit : function() {
			curSeg = baseTools;
			_commonsJsPath = curSeg.getCommonsJsPath();
			// curSeg.loadJs(_commonsJsPath + "/js/jquery.blockUI.min.js");
		},
		// 动态加载js文件
		loadJs : function(url, callback) {
			var done = false;
			var script = document.createElement('script');
			script.type = 'text/javascript';
			script.language = 'javascript';
			script.src = url;
			if (callback) {
				script.onload = script.onreadystatechange = function() {
					if (!done && (!script.readyState || script.readyState == 'loaded' || script.readyState == 'complete')) {
						done = true;
						script.onload = script.onreadystatechange = null;
						if (callback) {
							callback.call(script);
						}
					}
				};
			}
			document.getElementsByTagName("head")[0].appendChild(script);
		},
		// 动态加载css文件
		loadCss : function(url, callback) {
			var link = document.createElement('link');
			link.rel = 'stylesheet';
			link.type = 'text/css';
			link.media = 'screen';
			link.href = url;
			document.getElementsByTagName('head')[0].appendChild(link);
			if (callback) {
				callback.call(link);
			}
		},
		/**
		 * 根据DOM的ID获取对象(快速方法)
		 * 
		 * @param tagId
		 *            DOM的ID
		 */
		byId : function(tagId) {
			return document.getElementById(tagId);
		},
		getValByID : function(tagId) {
			return $("#" + tagId).val();
		},
		setValToID : function(tagId, val) {
			$("#" + tagId).val(val);
		},
		/**
		 * 修改页面中form所属的标签的ID
		 * 
		 * @param formIDs
		 *            表单名数组
		 */
		setIdByName : function(formIDs) {
			// 修改页面中form所属的标签的ID
			$.each(formIDs, function(i, formID) {
				$("input,textarea,select", $("#" + formID)).attr("id", function() {
					return formID + "_" + this.name;
				});
				$("div,span", $("#" + formID)).attr("id", function() {
					return formID + "_" + this.id;
				});
				baseTools.checkFormLock([ formID ]);
			});
		},
		/**
		 * 获取发布域路径
		 * 
		 * <pre>
		 * 例如地址栏中显示http: //localhost/web/test.htm
		 * 该方法返回: http:
		 * //localhost/web
		 * </pre>
		 */
		getWebRoot : function() {
			return _rootPath;
		},
		getPrePath : function() {
			return prePath;
		},
		/**
		 * 获取当前页的完整路径
		 * 
		 * <pre>
		 * 例如地址栏中显示http: //localhost/web/test.htm
		 * 该方法返回: http:
		 * //localhost/web/test.htm
		 * </pre>
		 */
		getCurPage : function() {
			return _curPage;
		},
		/**
		 * 获取当前界面的相对路径<br>
		 * 
		 * <pre>
		 * 例如地址栏中显示http: //localhost/web/dojoajax.htm
		 * 该方法返回: web / dojoajax.htm
		 * </pre>
		 */
		getCurPagePath : function() {
			return _curPagePath;
		},
		/**
		 * 从url的属性值对中取值
		 * 
		 * <pre>
		 * 例如:http://localhost/web/test.htm?name=yhj&amp;note=good
		 * var name = baseTools.getUrlQueryString('name');
		 * name值为&quot;yhj&quot;
		 * &lt;pre&gt;
		 * @param val 要获取的属于
		 * @return 没有找到时返回&quot;&quot;
		 * 
		 */
		getUrlQueryString : function(val) {
			return this.getUrlQueryStringByUrl(this.getCurPage(), val);
		},
		getUrlQueryStringByUrl : function(url, val) {
			var re = new RegExp("(&|\\?)" + val + "=([^&?]*)", "ig");

			var tem = '';
			try {
				if (url.match(re)) {
					tem = ((url.match(re)) ? (url.match(re)[0].substr(val.length + 2)) : "");
				}
			} catch (e) {
				tem = ''
			}
			return tem;
		},
		/**
		 * 获取commons路径
		 */
		getCommonsJsPath : function() {
			var path = [];
			$("head script").each(function() {
				var src = $(this).attr('src');
				if (src == undefined)
					return true;
				if (src.indexOf('base_tools') != -1) {
					var ds = src.split('/');
					for (var i = 0; i < ds.length; i++) {
						path.push(ds[i]);
						if (ds[i] == 'commons') {
							// loadImg.push(ds[i]);
							break;
						}
					}
				}
			});
			return path.join('/');
		},
		/**
		 * 获取commons路径
		 */
		getRootJsPath : function() {
			var path = [];
			$("head script").each(function() {
				var src = $(this).attr('src');
				if (src.indexOf('base_tools') != -1) {
					if (src.indexOf('..') != -1) {
						var ds = src.split('/');
						for (var i = 0; i < ds.length; i++) {
							if (ds[i] == '..')
								path.push(ds[i]);
						}
					}
				}
			});
			return path.join('/');
		},
		showMask : function(msg) {
			// msg = msg ? msg : "数据加载中...";
			// $.blockUI({ message: '<h1><img src="busy.gif" />' + msg +
			// '</h1>'});
		},
		hideMash : function(maskObj) {
			// $.unblockUI();
		},
		/**
		 * 替换html特殊字符
		 * 
		 * @param strContext
		 *            需要替换的字符串
		 */
		repHtml : function(strContext) {
			/*
			 * if (strContext.length == 0) return ""; strContext = strContext.replace(/</gi, '&lt;'); strContext = strContext.replace(/>/gi, '&gt;');
			 */
			return strContext;
		},
		/**
		 * 替换html特殊字符
		 * 
		 * @param strContext
		 *            需要替换的字符串
		 */
		repText : function(strContext) {
			/*
			 * if (strContext.length == 0) return ""; if (typeof(strContext) == "string") { strContext = strContext.replace(/&lt;/gi, '<'); strContext =
			 * strContext.replace(/&gt;/gi, '>'); }
			 */
			return strContext;
		},
		/**
		 * 自动组装指定表单数据
		 * 
		 * @param formNames
		 *            表单名称数组，可以为空
		 * @param params
		 *            附加参数对象数组 可以为空
		 * @return 返回值对字符串,找不到表单时返回""
		 */
		preparePostData : function(formNames, params) {
			var result = [];
			if (formNames) {
				for (var x = 0; x < formNames.length; x++) {
					var formObj = document.getElementById(formNames[x]);
					if (formObj)
						for (var i = 0; i < formObj.elements.length; i++) {
							var el = formObj.elements[i];
							var tagName = el.tagName.toLowerCase();
							if (tagName == "textarea") {
								el.value = this.repHtml(el.value);
							} else if (tagName == "input") {
								if (el.type.toLowerCase() == "text") {
									el.value = this.repHtml(el.value);
								}
								if (el.type.toLowerCase() == "radio") {
									el.value = this.repHtml(el.value);
								}
							}
						}
				}
				var tem = "";
				for (var f = 0; f < formNames.length; f++) {
					tem = $("#" + formNames[f]).serialize();
					if (tem.length > 0)
						result.push(tem);
				}
			}
			var bUserID = false;
			// 添加附加参数
			if (params) {
				// result.push("&" + $.param(params));
				var fjParam = [];
				for ( var key in params) {
					var val = params[key] != undefined ? params[key].toString() : "";
					if (key == "CUR_USERID")
						bUserID = true;
					fjParam.push(encodeURIComponent(key) + "=" + encodeURIComponent(val));
				}
				// 修正在tomcat下提示 WARNING: Parameters: Invalid chunk ignored.
				// result.push((result.length == 0 ? "" : "&") +
				// fjParam.join("&"));
				result.push(fjParam.join("&"));
			}
			// if (!bUserID) //附加cookie值
			// result.push(encodeURIComponent("CUR_USERID") + "=" +
			// encodeURIComponent(jdglTools.getUserId()));
			return result.join("&");
		},

		/**
		 * 简化跨域调用版本,根据参数对象中指定的值向服务端提交请求
		 * 
		 * <pre>
		 * 例如:
		 * var xhrArgs = {
		 * 	url : &quot;getXT_USERByPage.do&quot;,
		 * 	forms : [ &quot;saveForm&quot; ],
		 * 	params : params,
		 * 	msg : &quot;正在加载...&quot;,//进度提示文字 可以不写
		 * 	//  callBefore:[callBefore],
		 * 	callback : [ pageFlowControl ]
		 * };
		 * baseTools.xhrAjaxJsonP(xhrArgs);
		 * </pre>
		 * 
		 * @param xhrArgs
		 */
		xhrAjaxJsonP : function(xhrArgs) {
			var maskObj = null;
			var bShow = true;
			if (typeof xhrArgs.bShow != 'undefined') {
				bShow = xhrArgs.bShow;
			}
			if (bShow) {
				maskObj = this.showMask(xhrArgs.msg);
			}

			var urlParam = this.preparePostData(xhrArgs.forms, xhrArgs.params);

			var tempUrl = xhrArgs.url;
			if (tempUrl && tempUrl.indexOf("?") == -1) {
				tempUrl = tempUrl + "?" + urlParam;
			} else {
				tempUrl = tempUrl + "&" + urlParam;
			}

			if (tempUrl && tempUrl.indexOf("username") == -1 && tempUrl.indexOf("sign") == -1) {
				// 追加单点登录参数
				var username = baseTools.getUrlQueryString("username");
				var sign = baseTools.getUrlQueryString("sign");
				if (username && sign) {
					urlParam += "&username=" + username;
					urlParam += "&sign=" + sign;
				}
			}

			var url = xhrArgs.url;
			var actionUrl = baseTools.getUrlQueryString("actionUrl");
			if (actionUrl) {
				// 跨域action请求
				url = baseTools.getUrlQueryString("actionUrl") + url;
//				var ck = baseTools.getCookie("QX_USER");
//				urlParam += "&LOG_CZRY_DM=" + ck["CZRY_DM"];
//				urlParam += "&LOG_ZZJG_DM=" + ck["ZZJG_DM"];
//				urlParam += "&LOG_USERID=" + ck["USERID"];
//				urlParam += "&ACCOUNTID=" + ck["ACCOUNTID"];
//				urlParam += "&SJQXFA=" + ck["SJQXFA"];
			}

			var async = true;
			if (xhrArgs.async != undefined)
				async = xhrArgs.async;
			var dataType = "jsonp";
			if (xhrArgs.dataType != undefined)
				dataType = xhrArgs.dataType;
            alert(dataType);
			var type = "GET";
			if (xhrArgs.type != undefined)
				type = xhrArgs.type;
			$.ajax({
				url : url,
				type : type,
				async : async,
				dataType : dataType,
				// timeout:10000,
				// 要发送到服务器的数据
				data : urlParam,
				// 当请求失败时调用的函数
				error : function(XMLHttpRequest, textStatus, errorThrown) {
					if(textStatus == 'timeout'){
						alert('连接服务器超时，请稍后再试！' );
					}else{
						// 调用本次AJAX请求时传递的options参数
						alert('操作提示\n操作失败原因:' + textStatus + "\n" + errorThrown);
					}
					
					if (bShow)
						baseTools.hideMash(maskObj);
				},
				// 当请求成功时调用的函数
				success : function(data, textStatus) {
					// this; // 调用本次AJAX请求时传递的options参数
					if (xhrArgs.callback)
						for (var i = 0; i < xhrArgs.callback.length; i++)
							xhrArgs.callback[i](data, xhrArgs);
					if (bShow)
						baseTools.hideMash(maskObj);
				},
				// 当请求完成时调用的函数
				complete : function() {
				}
			});
		},
		/**
		 * 简化调用版本,根据参数对象中指定的值向服务端提交请求
		 * 
		 * <pre>
		 * 例如:
		 * var xhrArgs = {
		 * 	dataType : 'json',//默认json，可以是xml,html,script,json
		 * 	url : &quot;getXT_USERByPage.do&quot;,
		 * 	type : &quot;POST&quot;, //默认POSt，可以是POSt,GET
		 * 	forms : [ &quot;saveForm&quot; ],
		 * 	params : params,
		 * 	msg : &quot;正在加载...&quot;,//进度提示文字 可以不写
		 * 	//  callBefore:[callBefore],
		 * 	callback : [ pageFlowControl ]
		 * };
		 * baseTools.xhrAjax(xhrArgs);
		 * </pre>
		 * 
		 * @param xhrArgs
		 */
		xhrAjax : function(xhrArgs) {
			var maskObj = null;
			var bShow = true;
			if (typeof xhrArgs.bShow != 'undefined') {
				bShow = xhrArgs.bShow;
			}
			if (bShow) {
				maskObj = this.showMask(xhrArgs.msg, Math.round(Math.random() * 10));
			}
			var type = 'POST';
			if (xhrArgs.type)
				type = xhrArgs.type;
			var dataType = 'json';
			if (xhrArgs.dataType)
				dataType = xhrArgs.dataType;
			var async = true;
			if (xhrArgs.async != undefined)
				async = xhrArgs.async;
			var urlParam = this.preparePostData(xhrArgs.forms, xhrArgs.params);
			// alert(urlParam)
			
			$.ajax({
				url : xhrArgs.url,
				type : type,
				async : async,
				dataType : dataType,
				// 要发送到服务器的数据
				data : urlParam,
				// 当请求失败时调用的函数
				error : function(XMLHttpRequest, textStatus, errorThrown) {
					// 调用本次AJAX请求时传递的options参数
					alert('操作提示\n操作失败原因:' + textStatus + "\n" + errorThrown);
					if (bShow)
						baseTools.hideMash(maskObj);
				},
				// 当请求成功时调用的函数
				success : function(data, textStatus) {
					// this; // 调用本次AJAX请求时传递的options参数
					if (xhrArgs.callback)
						for (var i = 0; i < xhrArgs.callback.length; i++)
							xhrArgs.callback[i](data, xhrArgs);
					if (bShow)
						baseTools.hideMash(maskObj);
				},
				// 当请求完成时调用的函数
				complete : function() {
				},
				// 设置超时时间 10s
				timeout:10000
			});
		},
		/**
		 * 解析JSON的数据格式，并把数据绑定到显示控件 strJson 基本格式为控件NAME:值
		 * 
		 * @param formName
		 *            json格式的对象,注意显示控件的NAME要与JSON的键名要保持一致
		 */
		bindFormData : function(formName, jsonObj) {
			try {
				// 排除不需要显示的列
				for ( var key in jsonObj) {
					var obj = this.byId(formName + "_" + key);
					// alert(key+'='+jsonObj[key]+'\n'+obj)
					if (obj) {
						var tagName = obj.tagName.toLowerCase();
						if (tagName == "div" || tagName == "span") {
							obj.innerHTML = jsonObj[key];
							continue;
						}

						if (tagName == "input") {
							if (obj.type.toLowerCase() == "checkbox") {
								obj.checked = jsonObj[key] == obj.value;
								continue;
							}
							if (obj.type.toLowerCase() == "radio") {
								var radioObj = document.getElementsByName(obj.name);
								for (var i = 0; i < radioObj.length; i++) {
									if (radioObj[i].value == jsonObj[key]) {
										radioObj[i].checked = true;
										continue;
									}
								}
								continue;
							}
						}

						obj.value = jsonObj[key] != null ? this.repText(jsonObj[key]) : "";
					}
				}
			} catch (e) {
				alert("客户端绑定错误:\n" + "URL:\n\t" + this._curPage + "\nmessage:\n\t" + e.message);
			}
		}
	};
})();
baseTools.onInit();

/**
 * 兼容火狐的回车换焦点
 */
/*
 * baseTools.checkLock = function() { //兼容火狐的回车换焦点 $('input:text:first').focus(); var inp = $('input[type!="hidden"]:enabled,select:enabled'); inp.bind("keydown", function(e) { var
 * key = e.which; if (key == 13) { var nextIdx = inp.index(this) + 1; inp.get(nextIdx >= inp.size() ? nextIdx - 1 : nextIdx).focus(); } }); };
 */

/**
 * 兼容火狐的回车换焦点
 * 
 * @param formIDS
 *            表单ID数组
 */
baseTools.checkFormLock = function(formIDS) {
	$.each(formIDS, function(i, val) {
		$("#" + val + " input[type!='hidden'][require !='false']:not([readonly]),select,textarea").keypress(function(e) {
			var keyCode = e.keyCode ? e.keyCode : e.which ? e.which : e.charCode;

			if (keyCode == 13) {// 判断所按是否回车键
				// 获取表单中的所有输入项
				var inputs = $("#" + val).find("input[type!='hidden'],select");
				var idx = inputs.index(this);// 获取当前焦点输入框所处的位置
				idx == inputs.length - 1 ? $("#" + val).click() : inputs[idx + 1].focus();
				return false;// 取消默认的提交行为
			}
		});
	});
};

// 兼容火狐的回车换焦点
baseTools.checkLock = function(event) {
	try {
		var keycode;

		event = event ? event : (window.event ? window.event : event);
		// event = this.getEvent();
		if (document.all) {
			keycode = event.keyCode;
		} else {
			keycode = event.which;
		}
		var src = event.srcElement ? event.srcElement : event.target;
		if (keycode == 13) {
			if (document.all) {
				event.keyCode = 9;
			} else {
				var fl = document.forms.length; // 子桢个数.
				for (var a = 0; a < fl; a++) {
					var ele = document.forms[a].elements;
					for (var i = 0; i < ele.length; i++) {
						var q = (i == ele.length - 1) ? 0 : i + 1;// if last
						// element :
						// if any
						// other
						if (src == ele[i]) {
							ele[q].focus();
							break;
						}
					}
				}
				event.preventDefault();
			}
		}
	} catch (e) {
	}
};

baseTools.getCurData = function() {
	var curDate = new Date();
	var year = curDate.getFullYear();
	var month = curDate.getMonth() + 1;
	var day = curDate.getDate();
	return year + '-' + (month < 10 ? '0' + month : month) + '-' + (day < 10 ? '0' + day : day);
};
baseTools.getCurMonthStartEnd = function() {
	var curDate = new Date();
	var year = curDate.getFullYear();
	var month = curDate.getMonth() + 1;
	var lastDay = this.getLastDay(year, month);
	var cur = [];
	cur.push(year + '-' + (month < 10 ? '0' + month : month) + '-01');
	cur.push(year + '-' + (month < 10 ? '0' + month : month) + '-' + (lastDay < 10 ? '0' + lastDay : lastDay));
	return cur;
};
baseTools.getLastDay = function(year, month) {
	var new_year = year; // 取当前的年份
	var new_month = month++;// 取下一个月的第一天，方便计算（最后一天不固定）
	if (month > 12) // 如果当前大于12月，则年份转到下一年
	{
		new_month -= 12; // 月份减
		new_year++; // 年份增
	}
	var new_date = new Date(new_year, new_month, 1); // 取当年当月中的第一天
	return (new Date(new_date.getTime() - 1000 * 60 * 60 * 24)).getDate();// 获取当月最后一天日期
};

/**
 * 左填充
 * 
 * @param str
 *            字符串
 * @param len
 *            需要的长度
 * @param pad
 *            需要填充的字符
 */
baseTools.lpad = function(str, len, pad) {
	if (str.trim() == '')
		return '';
	var ret = '';
	for (var i = 1; i < len - str.length + 1; i++)
		ret += pad;

	return ret + str;
};
/**
 * 右填充
 * 
 * @param str
 *            字符串
 * @param len
 *            需要的长度
 * @param pad
 *            需要填充的字符
 */
baseTools.rpad = function(str, len, pad) {
	var ret = '';
	for (var i = 1; i < len - str.length + 1; i++)
		ret += pad;

	return str + ret;
};

function isNumber(s) {
	return (!isNaN(s.trim()));
}

function isDate(str) {
	var reg = /^((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-))$/
	return (reg.test(str));
}

baseTools.arrayContains = function(array, item) {
	for (var i = 0; i < array.length; i++) {
		if (array[i] == item) {
			return true;
		}
	}
	return false;
};

// 转换json对象为字符串
baseTools.stringify = function(object) {
	var type = typeof object;
	if ('object' == type) {
		if ((object != null) && (Array == object.constructor))
			type = 'array';
		else if ((object != null) && (RegExp == object.constructor))
			type = 'regexp';
		else
			type = 'object';
	}
	var results = [];
	switch (type) {
	case 'undefined':
	case 'unknown':
		return;
		break;
	case 'function':
	case 'boolean':
	case 'regexp':
		return object.toString();
		break;
	case 'number':
		return isFinite(object) ? object.toString() : 'null';
		break;
	case 'string':
		return '"' + object.replace(/(\\|\")/g, "\\$1").replace(/\n|\r|\t/g, function() {
			var a = arguments[0];
			return (a == '\n') ? '\\n' : (a == '\r') ? '\\r' : (a == '\t') ? '\\t' : ""
		}) + '"';
		break;
	case 'object':
		if (object === null)
			return 'null';
		results.length = 0;
		for ( var property in object) {
			var value = this.stringify(object[property]);
			if (value !== undefined)
				results.push(this.stringify(property) + ':' + value);
		}
		return '{' + results.join(',') + '}';
		break;
	case 'array':
		results.length = 0;
		for (var i = 0; i < object.length; i++) {
			var value = this.stringify(object[i]);
			if (value !== undefined)
				results.push(value);
		}
		return '[' + results.join(',') + ']';
		break;
	}
};

baseTools.parse = function(strJson) {
	return (/[\]\}]$/.test(strJson)) ? eval("(" + strJson + ")") : strJson;
};

baseTools.expandTreeNode = function(treeObj, node, level) {
	if (level > 0) {
		level--;
		treeObj.expandNode(node, true, false, false, false);
		if (node.children) {
			for (var i = 0; i < node.children.length; i++) {
				var child = node.children[i];
				baseTools.expandTreeNode(treeObj, child, level);
			}
		}
	}
};

baseTools.expandTree = function(treeObj, level) {
	if (level > 0) {
		var nodes = treeObj.getNodes();
		for (var i = 0; i < nodes.length; i++) {
			var node = nodes[i];
			baseTools.expandTreeNode(treeObj, node, level);
		}
	}
};

baseTools.kvGet = function(k, callback) {
	baseTools.xhrAjax({
		url : "/cm/kvGet.do",
		params : {
			k : k
		},
		callback : [ function(jsonObj, xhrArgs) {
			switch (parseInt(jsonObj.code)) {
			case 0:
				callback(jsonObj.data);
				break;
			default:
				alert(jsonObj.msg);
			}
		} ]
	});
};

baseTools.kvGetV = function(k, callback) {
	baseTools.xhrAjax({
		url : "/cm/kvGetV.do",
		params : {
			k : k
		},
		callback : [ function(jsonObj, xhrArgs) {
			switch (parseInt(jsonObj.code)) {
			case 0:
				callback(jsonObj.data);
				break;
			default:
				alert(jsonObj.msg);
			}
		} ]
	});
};

baseTools.kvGetChildren = function(k, callback) {
	baseTools.xhrAjax({
		url : "/cm/kvGetChildren.do",
		params : {
			k : k
		},
		callback : [ function(jsonObj, xhrArgs) {
			switch (parseInt(jsonObj.code)) {
			case 0:
				callback(jsonObj.data);
				break;
			default:
				alert(jsonObj.msg);
			}
		} ]
	});
};

baseTools.getCurBrowser = function() {
	var isIE = !!window.ActiveXObject;
	var isIE10 = isIE && !!window.atob;
	var isIE9 = isIE && document.addEventListener && !window.atob;
	var isIE8 = isIE && document.querySelector && !document.addEventListener;
	var isIE7 = isIE && window.XMLHttpRequest && !document.querySelector;
	var isIE6 = isIE && !window.XMLHttpRequest;

	return {
		isIE : isIE,
		isIE6 : isIE6,
		isIE7 : isIE7,
		isIE8 : isIE8,
		isIE9 : isIE9,
		isIE10 : isIE10
	};
};

baseTools.setCookie = function(key, val) {
	if (/[\]\}]$/.test(val)) {
		val = baseTools.stringify(val);
	}
	$.cookie(key, val, {
		expires : 1,
		domain:"menhu.net",
		path : "/"
	});
};
baseTools.getCookie = function(key) {
	var val = $.cookie(key);
	if (val == null) {
		return "";
	}
	return baseTools.parse(val);
};
baseTools.delCookie = function(key) {
	$.cookie(key, null, {
		path : "/"
	});
};

baseTools.ssoLogin = function() {
	// 单点登录URL检测
	var search = window.location.search;
	// 小写username
	if (search && search.indexOf("username") != -1 && search.indexOf("sign") != -1) {
		baseTools.xhrAjax({
			url : "/checkSsoLogin.do" + search,
			async : false,
			params : {
				CUR_USERID : ""
			},
			callback : [ function(jsonObj, xhrArgs) {
				// console.log(jsonObj);
				switch (parseInt(jsonObj.code)) {
				case 1:
					baseTools.setCookie("QX_USER", jsonObj.data);
					baseTools.setCookie("USER_SEQ", jsonObj.data.USERID);
					break;
				default:
					alert(jsonObj.msg);
				}
			} ]
		});
	} else {
	}
};

$(document).ready(function() {
	if (baseTools.getCookie("QX_USER")) {
		// 无需再次登录
	} else {
		baseTools.ssoLogin();
	}
});

// 取消后退键退出系统
$(document).keydown(function(e) {// 绑定键盘按下事件
	var doPrevent;
	// for IE && Firefox
	var varkey = (e.keyCode) || (e.which) || (e.charCode);
	if (varkey == 8) {
		var d = e.srcElement || e.target;
		if (d.tagName.toUpperCase() == 'INPUT' || d.tagName.toUpperCase() == 'TEXTAREA') {
			doPrevent = d.readOnly || d.disabled;
			if (d.type.toUpperCase() == 'SUBMIT' || d.type.toUpperCase() == 'RADIO' || d.type.toUpperCase() == 'CHECKBOX' || d.type.toUpperCase() == 'BUTTON') {
				doPrevent = true;
			}
		} else {
			doPrevent = true;
		}
	} else {
		doPrevent = false;
	}
	if (doPrevent)
		e.preventDefault();
});
